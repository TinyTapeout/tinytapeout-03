--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - hovalaag_tiny_tapeout.v
    - hovalaag_wrapper.v
    - HovalaagCPU/Hovalaag.v
    - decoder.v
    - ring_oscillator.v
  top_module:  "MichaelBell_hovalaag"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Mike Bell"
  title:        "Hovalaag CPU"
  language:     "Verilog"
  description:  "Implementation of the CPU from HOVALAAG"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      [HOVALAAG](http://silverspaceship.com/hovalaag/) (Hand-Optimizing VLIW Assembly Language as a Game) is a free Zachlike game.

      This is an implementation of the VLIW processor from the game.  Thank you to @[nothings](https://twitter.com/nothings) for the fun game,
      making the assembler public domain, and for permission to create this hardware implementation.

      The processor uses 32-bit instructions and has 12-bit I/O.  The instruction and data are therefore passed in and out over 10 clocks per
      processor clock.

      More details in the [github repo](https://github.com/MichaelBell/tt03-hovalaag).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The [assembler](http://silverspaceship.com/hovalaag/assembler.zip) can be downloaded to generate programs.

      The subcycle counter can be reset independently of the rest of the processor, to ensure you can get to a known state without clearing all registers.

# A description of what the inputs do
  inputs:               
    - Clock
    - Reset disable (resets enabled when low)
    - Input 0 or Reset (when high)
    - Input 1 or Reset subcycle count (when high)
    - Input 2 or enable ROSC (when high and reset enabled)
    - Input 3
    - Input 4
    - Input 5
# A description of what the outputs do
  outputs:
    - Output 0
    - Output 1
    - Output 2
    - Output 3
    - Output 4
    - Output 5
    - Output 6
    - Output 7

# The following fields are optional
  tag:          "microprocessor"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "RebelMike#7826"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     12500       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
