---
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
  # Source files must be in ./src and you must list each source file separately
  source_files:
    - top.v
  top_module:  "dratini0_pov_display_top"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Balint Kovacs"      # Your name
  title:        "POV display"      # Project title
  language:     "Amaranth" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Small POV display"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The image is stored in a 8x32 loop, this can be updated over the SPI bus.
      Additionally, there is a clock generator that generates 48-128 pulses for every cycle of the hall effect sensor.
      Finally, a controller passes 32 of those pulses each cycle to the loop memory, and also handles blanking.

      Relevant registers are reset by transitions of the hall effect sensor and the CS lines.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      * Supply a regular clock, up to f_clk/1024, on hall_in.
      * Load an image in a single, 32 byte SPI transaction.
      * Move the device quickly

# A description of what the inputs do
  inputs:
    - clock
    - cs_n
    - sck
    - mosi
    - hall_in
    - hall_invert
    - divider[0]
    - divider[1]
# A description of what the outputs do
  outputs:
    - led0
    - led1
    - led2
    - led3
    - led4
    - led5
    - led6
    - led7

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "A line of LEDs, an MCU to load the image data, and some means of timing"      # Describe any external hardware needed
  discord:      "dratini0#9094"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     12500   # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
