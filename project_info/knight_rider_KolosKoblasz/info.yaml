---
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
# Source files must be in ./src and you must list each source file separately
  source_files:
    - knight_rider_KolosKoblasz.v
    - light_shift.v
    - rate_ctrl.v
    - brightness_ctrl.v
  top_module:  "knight_rider_KolosKoblasz"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Kolos Koblasz"      # Your name
  title:        "Knight Rider Sensor Lights"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "The logic assertes output bits one by one, like KITT's sensor lights in Knight Rider."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Uses several counters, shiftregisters to create a moving light.
      Input[2] and Input[3] can control speed and brightness respectively.
      Brightness control is achieved by PWM of the output bits at 50Hz.
      Simulated with 6KHz clock signal.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset it starts moving the switched on LED.
      Input[0] is clk and Input[1] is reset (1=reset on, 0=reset off).
      By creating rising edges on Input[2] and Input[3] the two config spaces can be discovered.
      Conect LEDs with ~1K-10K Ohm serial resistors to output pins and connect push button switches to
      Input[2] and Input[3] which drive the inputs with logic zeros when idle and with logic 1 when pressed.
      Rising edge on these inputs selects the next settings.

# A description of what the inputs do
  inputs:
    - clock
    - reset
    - speed control
    - brightness control
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - LED 0
    - LED 1
    - LED 2
    - LED 3
    - LED 4
    - LED 5
    - LED 6
    - LED 7

# The following fields are optional
  tag:          "LED, KnightRider, KITT, PWM"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "Conect LEDs with ~1K-10K Ohm serial resistors to output pins and connect push button switches to Input[2] and Input[3] which drive the inputs with logic zeros when idle and with logic 1 when pressed. Rising edge on these inputs selects the next settings."      # Describe any external hardware needed
  discord:      "kolos_koblasz#3383"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""          # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     6000        # Clock frequency in Hz (if required)
  picture:      "KITT.jpg"  # relative path to a picture in your repository
