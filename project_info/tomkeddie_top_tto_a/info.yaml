--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - top_tto.v
    - led_panel_single.v
    - uart_rx.v
  top_module:  "tomkeddie_top_tto_a"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Tom Keddie"            # Your name
  title:        "LED Panel Driver"      # Project title
  language:     "Verilog"      # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Drives a 16x16 P10 LED panel"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
        * The circuit updates half of a P10 16x16 LED display module
        * It initially displays the string TT03
        * It provides a 600baud uart input to
          - paint pixels
          - erase pixels
          - clear the display
          - change the displayed colour
        * Functionality is limited by resource availability and clock rate
          - single colour at once
          - no double buffer, updates may have artifacts
          - refresh rate is low, some flicker is observed (16*8=128 pixels at 6kHz is ~46Hz, plus overhead)
        * Mode pin to allow for 2 different clocking patterns

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
        * Connect the display module as per the outputs
        * Connect the uart
        * Power on and see the TT03 text
        * If the display is swapped by quadrant change the mode pin
        * Use the script(s) in the software directory to control the display

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - uart
    - mode
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - red
    - blue
    - b
    - blank
    - green
    - a
    - clk
    - latch

# The following fields are optional
  tag:          "serial"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "led panel, level converter to 5V logic"      # Describe any external hardware needed
  discord:      "TomKeddie#7070"
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     6000    # Clock frequency in Hz (12kHZ update rate)
  picture:      "doc/2023-04-15_07-18-57.jpg"      # relative path to a picture in your repository
