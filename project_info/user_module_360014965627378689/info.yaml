--- 
# TinyTapeout project information
project:
  wokwi_id:    360014965627378689        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Carin Schreiner"      # Your name
  title:        "CTF - Catch the fish"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Catch the fish is a whac-a-mole game."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The project consists of 
      * a fibonacci lfsr of degree 6. 
      * a simple timer: the timer consists of two flip flops. It slows down the game and further amplifies the pseudo-randomness
      * a button press detection for each button
      * a simple reward detection
      * Output state Handlers
      * Output Selection: The last bit of the lsfr is used as the decision whether to give an output or not. The second and third to last bits are used to determine on which pin the output should be given. If both bits are zero, no output is given.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      To play the game, press the start button and make sure the clock is set to a frequency of one or two. The higher the frequency the more difficult the game gets.
      To score, you need to press the button while the respectivly numbered feedback output is one. You then get a reward feedback

# A description of what the inputs do
  inputs:               
    - clock
    - button 1
    - button 2
    - button 3
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - feedback 1
    - feedback 2
    - feedback 3
    - reward feedback
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
