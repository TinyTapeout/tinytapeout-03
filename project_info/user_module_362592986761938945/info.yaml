--- 
# TinyTapeout project information
project:
  wokwi_id: 362592986761938945 # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Marushika Suri  , Siya Sharma  , Rudakshi  Arora "      # Your name
  title:        "FullAdderusing4is1"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This project is used to add 3-bit binary numbers"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Explain how your project works :  A full adder is a digital circuit that performs the addition of three binary digits: two inputs and a carry bit from a previous stage. The output of a full adder is the sum of the three inputs and a carry bit for the next stage. A 4:1 multiplexer (mux) is a digital circuit that selects one of four input signals to pass through to the output based on the value of two select inputs.  Here, we are implementing a full adder using two 4:1 mux.  We have taken 3 inputs:A,B,Cin.  The output of first mux(i.e.,Sum function) is on OUT0 Pin and the output of second mux(Carry) is connected to OUT1 Pin, connected with a seven-segment display.   The use of multiplexers simplifies the implementation of the full adder circuit.
      



# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project :  At the input, we have used 4 pins. Pin IN0 is for the clock. Pin IN1, IN2, IN3 for A, B,Cin respectively. Here, we will set the clock at "1", we'll provide sum and carry at the OUT0 and OUT1 pins of the output respectively.Once we start the simulation, we can add two 3-bit binary numbers and the output will be displayed at the 7-segment display.


# A description of what the inputs do
  inputs:               
    - in1(Connected to A input)
    - in2(Connected to Select line S1)
    - in3(Connected to Select line S2)
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - segment a(Connected to OUT0 performing the Sum function)
    - segment b(Connected to OUT1 performing the Carry function)
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "Marushika#7234"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
