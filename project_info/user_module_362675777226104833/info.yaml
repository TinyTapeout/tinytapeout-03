--- 
# TinyTapeout project information
project:
  wokwi_id:    362675777226104833        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Alexandra Zhang Jiang"      # Your name
  title:        "MMM Finite State Machine (4 States)"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Finite State Machine for the Magnetic Microsystems and Microrobotics Research Lab at UCI"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This chip will be incorporated in the microrobot that is being developed in lab.
      
      ### Inputs
      The inputs consist of two bits I0 and I1, each one for a sensor that detects contamination in water to the left and right fo the robot respectively. 
      The input bus goes to logic gates along with the Current State to calculate the Next State, which is then saved in a register (D-FlipFlop).
      
      ## States 
      There are a total of four states: 
      - 00 Start (default initial state of the robot, both motors are off)
      - 01 Go Right (which enables Left Motor in order to go right) 
      - 10 Go Left (which enables Right Motor in order to go left)
      - 11 Straight (both motors are enabled to go straight)
      
      The register will store the Current State (which is given by S0 and S1) at any given time.
      
      ## Outputs
      This is a Moore Finite State Machine, meaning that the output only depends on the current state.
      The outputs consist of two bits M0 and M1, each one turns on the motor on the right or left of the robot respectively.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The truth table for the FSM can be found below.
      
      | I0 | I1 | S0 | S1 | S0+ | S1+ | M0 | M1 |
      |----|:--:|:--:|:--:|:---:|:---:|:--:|---:|
      | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
      | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 1 |
      | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 |
      | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |
      | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 |
      | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 |
      | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 |
      | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 1 |
      | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 
      | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 |
      | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |
      | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 1 |
      | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 |
      | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 1 |
      | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 |
      | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - none
    - none
    - none
    - none
    - Sensor Left Input
    - Sensor Right Input
# A description of what the outputs do
  outputs:
    - Enable Right Motor
    - Enable Left Motor
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# The following fields are optional
  tag:          "test"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "3-electrode sensor and motors"      # Describe any external hardware needed
  discord:      "Ale#7151"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
