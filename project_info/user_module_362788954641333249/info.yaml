--- 
# TinyTapeout project information
project:
 wokwi_id: 362788954641333249 # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Ashutosh Kumar"      # Your name
  title:        "Water-Level-Indicator-With-Auto-Motor-Control"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "As water level of tank decreases/increases LED glow according to it.when water level touches the last then motor start and run until full the tank."      # Short description of what your project does
# Longer description of how the project works. You can use standard markdown format.
  how_it_works:
              First 4 flip flop uses as synchroniser.
              Total four state define as full  Half1  Half2  Empty. 
              These four state mapped with 00  01  10  11 and further it  mapped with 4 Led. 
              Logic circuits design to control the states using D-flip flop.
              Another Logic design with help of one D flip flop to control motor. 
              Motor only start when it goes to last stage and it OFF only when water level of tank full. 
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project:
      it have 3 input 
      clock 
      input A 
      input B 
      Total 5 output 
      out1 -- connect to red Led (Full)
      out2 -- connect to yellow1 Led (Half1)
      out3 -- connect to yellow2 Led (Half2)
      out4 -- connect to Red Led (Empty)
      out5 -- connect to Red Led (moto)    
      
 # Testing Table : 
 # 
 #             |clock     | input--A | input --B | Out-1 | Out-2 |Out-3  |Out-4 |Out-5 |
 #             |-----     |----------|-----------|-------|-------|------ |------|------|
 #            |  5-5k    |   0      |     0     |  1    |  0    |   0   |  0   |  0   |
 #             |  5-5k    |   0      |     1     |  0    |  1    |   0   |  0   |  0   |
 #             |  5-5k    |   1      |     0     |  0    |  0    |   1   |  0   |  0   |
 #             |  5-5k    |   1      |     1     |  0    |  0    |   0   |  1   |  1   | 
 #             |  5-5k    |   1      |     0     |  0    |  0    |   1   |  0   |  1   |
 #             |  5-5k    |   0      |     1     |  0    |  1    |   0   |  0   |  1   |  
 #             |  5-5k    |   0      |     0     |  1    |  0    |   0   |  0   |  0   |
 # 
 #             ** SEQUENCE MATTER 
# A description of what the inputs do
  inputs:               
         clock 
         input A binary input
         input B binary input
         none
         none
         none
         none
         none
# A description of what the outputs do
  outputs:
          - segment a -- Red Led (Full) 
          - segment b -- Yellow1 (Half1)
          - segment c -- Yellow2 ( Half2)
          - segment d -- RED (Empty)
          - segment e -- RED (motor)
          - segment f
          - segment g
          - dot

# The following fields are optional
  tag:          "first tiny tapout!"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:      0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
