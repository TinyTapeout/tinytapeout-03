--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - yubex_tiny_logic_analyzer.v
  top_module:  "yubex_tiny_logic_analyzer"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "yubex"      # Your name
  title:        "tiny logic analyzer"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "The design samples one data input and shows the current state and edge events using the 7 segment display. "      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    The samples of the data input pin are shifted into a shift register first. After that the 2 most significant bits of the shift register are used to detect the current signal state (high, low) and the edge events (rising edge, falling edge). There are 4 different states/events displayed on the 7 segment display.
    
    | state/event  | segments on |
    | ------------ | ----------- |
    | high         | a           |
    | low          | d           |
    | rising edge  | e and f     |
    | falling edge | b and c     |
    
    The edge events duration is extended by counters, so the events can actually be seen by the human eye.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      You can test by using the dip switch connected to io_in[2] as data input.
      I plan to connect a wire to the pin on the PCB by PMOD connector or custom soldering to be able to have a "measurement probe". ;-)  

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - data input
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "no external HW required"      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     12500   # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
